/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package proyecto.vista;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import proyecto.controlador.GestorStock;

/**
 *
 * @author User0
 */
public class form_Empleado extends javax.swing.JFrame {

    /**
     * Creates new form form_Empleado
     */
    public form_Empleado() {
        initComponents();
        cargarProductosComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCerrarSesion = new javax.swing.JToggleButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lbltitulo = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        lblProducto = new javax.swing.JLabel();
        lblValorStock = new javax.swing.JLabel();
        cmbProducto = new javax.swing.JComboBox<>();
        cmbCliente = new javax.swing.JComboBox<>();
        lblCliente = new javax.swing.JLabel();
        lblCantidad = new javax.swing.JLabel();
        btnAgregarProducto = new javax.swing.JButton();
        btnEditarCantidad = new javax.swing.JButton();
        btnLimpiarTabla = new javax.swing.JButton();
        txtCantidad = new javax.swing.JTextField();
        btnEliminarCantidad = new javax.swing.JButton();
        lblValorStock1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaVentas = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        btnPagar = new javax.swing.JButton();
        btnSalirCuenta = new javax.swing.JButton();
        btnResumenFacturas = new javax.swing.JButton();
        btnRefrescar = new javax.swing.JButton();

        btnCerrarSesion.setText("Cerrar sesión");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(69, 104, 130));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(27, 60, 83));

        lbltitulo.setFont(new java.awt.Font("Segoe UI Semibold", 1, 48)); // NOI18N
        lbltitulo.setForeground(new java.awt.Color(255, 255, 255));
        lbltitulo.setText("VENTA DE PRODUCTOS");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(280, Short.MAX_VALUE)
                .addComponent(lbltitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 691, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(lbltitulo)
                .addContainerGap())
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1040, 90));

        jPanel3.setBackground(new java.awt.Color(249, 243, 239));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblProducto.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblProducto.setForeground(new java.awt.Color(51, 51, 51));
        lblProducto.setText("Producto: ");
        jPanel3.add(lblProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 80, -1));

        lblValorStock.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        lblValorStock.setForeground(new java.awt.Color(51, 51, 51));
        lblValorStock.setText("0");
        jPanel3.add(lblValorStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 60, 70, -1));

        cmbProducto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Elige una opción" }));
        cmbProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbProductoActionPerformed(evt);
            }
        });
        jPanel3.add(cmbProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, 190, -1));

        cmbCliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "General", " " }));
        cmbCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbClienteActionPerformed(evt);
            }
        });
        jPanel3.add(cmbCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 30, 190, -1));

        lblCliente.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblCliente.setForeground(new java.awt.Color(51, 51, 51));
        lblCliente.setText("Cliente : ");
        jPanel3.add(lblCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 59, -1));

        lblCantidad.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblCantidad.setForeground(new java.awt.Color(51, 51, 51));
        lblCantidad.setText("Cantidad: ");
        jPanel3.add(lblCantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 30, 100, -1));

        btnAgregarProducto.setText("Agregar");
        btnAgregarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarProductoActionPerformed(evt);
            }
        });
        jPanel3.add(btnAgregarProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 30, 100, 60));

        btnEditarCantidad.setText("Editar");
        btnEditarCantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarCantidadActionPerformed(evt);
            }
        });
        jPanel3.add(btnEditarCantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 30, 100, 60));

        btnLimpiarTabla.setText("Limpiar");
        btnLimpiarTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarTablaActionPerformed(evt);
            }
        });
        jPanel3.add(btnLimpiarTabla, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 30, 100, 60));
        jPanel3.add(txtCantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 30, 70, 20));

        btnEliminarCantidad.setText("Eliminar");
        btnEliminarCantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarCantidadActionPerformed(evt);
            }
        });
        jPanel3.add(btnEliminarCantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 30, 100, 60));

        lblValorStock1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblValorStock1.setForeground(new java.awt.Color(51, 51, 51));
        lblValorStock1.setText("Stock: ");
        jPanel3.add(lblValorStock1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 80, 70, -1));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 1000, 120));

        tablaVentas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N°", "Cliente", "Producto", "Precio", "Cantidad ", "Total"
            }
        ));
        jScrollPane1.setViewportView(tablaVentas);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 280, 1000, 310));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Rol : Cajero");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 120, -1, 20));

        btnPagar.setText("Pagar");
        btnPagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPagarActionPerformed(evt);
            }
        });
        jPanel1.add(btnPagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 600, 140, 40));

        btnSalirCuenta.setBackground(new java.awt.Color(203, 4, 4));
        btnSalirCuenta.setFont(new java.awt.Font("Microsoft PhagsPa", 0, 14)); // NOI18N
        btnSalirCuenta.setForeground(new java.awt.Color(255, 255, 255));
        btnSalirCuenta.setText("Salir de la Cuenta");
        btnSalirCuenta.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(153, 0, 0), new java.awt.Color(153, 0, 0), new java.awt.Color(153, 0, 0), new java.awt.Color(153, 0, 0)));
        btnSalirCuenta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSalirCuenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirCuentaActionPerformed(evt);
            }
        });
        jPanel1.add(btnSalirCuenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 610, 140, 40));

        btnResumenFacturas.setText("Resumen Facturas Generadas");
        btnResumenFacturas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResumenFacturasActionPerformed(evt);
            }
        });
        jPanel1.add(btnResumenFacturas, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 600, 230, 40));

        btnRefrescar.setText("Refrescar");
        btnRefrescar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefrescarActionPerformed(evt);
            }
        });
        jPanel1.add(btnRefrescar, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 600, 120, 40));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1040, 690));

        setSize(new java.awt.Dimension(1048, 692));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cmbClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbClienteActionPerformed

    private void limpiarCamposProducto() {
        txtCantidad.setText("");
        cmbProducto.setSelectedIndex(0);
        lblValorStock.setText("");
    }

    private double obtenerPrecioDeProducto(String marcaModelo) {
        try (BufferedReader br = new BufferedReader(new FileReader("productos_stock.txt"))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] partes = linea.split(";");
                if (partes.length >= 3) {
                    String actual = partes[0].trim() + " - " + partes[1].trim();
                    if (actual.equals(marcaModelo)) {
                        return Double.parseDouble(partes[2].trim());
                    }
                }
            }
        } catch (IOException | NumberFormatException e) {
            e.printStackTrace();
        }
        return -1; // Error
    }

    private double buscarPrecio(String marca, String modelo) {
        try (BufferedReader br = new BufferedReader(new FileReader("productos_stock.txt"))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] partes = linea.split(";");
                if (partes.length >= 4) {
                    if (partes[0].equalsIgnoreCase(marca) && partes[1].equalsIgnoreCase(modelo)) {
                        return Double.parseDouble(partes[2]); // precio
                    }
                }
            }
        } catch (IOException | NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error al buscar el precio del producto.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        return 0;
    }

    private void agregarProductoATabla() {
        String seleccion = (String) cmbProducto.getSelectedItem();
        String cantidadStr = txtCantidad.getText().trim();
        String stockStr = lblValorStock.getText().trim();
        String cliente = (String) cmbCliente.getSelectedItem();

        if (seleccion.equals("Elige una opción") || cantidadStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Selecciona un producto y una cantidad válida.");
            return;
        }

        int cantidad;
        int stock;

        try {
            cantidad = Integer.parseInt(cantidadStr);
            stock = Integer.parseInt(stockStr);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Cantidad o stock inválido.");
            return;
        }

        if (stock <= 0) {
            JOptionPane.showMessageDialog(this, "Stock insuficiente. No se puede vender este producto.");
            return;
        }

        if (cantidad > stock) {
            JOptionPane.showMessageDialog(this, "La cantidad excede el stock disponible.");
            return;
        }

        // Extraer marca y modelo
        String[] partes = seleccion.split(" - ");
        String marca = partes[0];
        String modelo = partes[1];

        // Buscar el precio en el archivo
        double precioUnitario = buscarPrecio(marca, modelo);
        double total = precioUnitario * cantidad;

        // Obtener número de factura: 001, 002, etc.
        DefaultTableModel modeloTabla = (DefaultTableModel) tablaVentas.getModel();
        int numeroFactura = modeloTabla.getRowCount() + 1;
        String codigoFactura = String.format("%03d", numeroFactura);

        // Agregar fila a la tabla en el orden correcto
        modeloTabla.addRow(new Object[]{
            codigoFactura, // 
            cliente, // 
            marca + " - " + modelo, // 
            precioUnitario, // 
            cantidad, // 
            total // 
        });

        // Actualiza visualmente el stock
        lblValorStock.setText(String.valueOf(stock - cantidad));
    }


    private void btnAgregarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarProductoActionPerformed
        agregarProductoATabla();
        limpiarCamposProducto();
    }//GEN-LAST:event_btnAgregarProductoActionPerformed

    private void btnSalirCuentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirCuentaActionPerformed
        form_login login = new form_login();
        login.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnSalirCuentaActionPerformed

    private void cargarProductosComboBox() {
        DefaultComboBoxModel<String> modeloCombo = new DefaultComboBoxModel<>();
        modeloCombo.addElement("Elige una opción"); // nueva opción por defecto

        try (BufferedReader br = new BufferedReader(new FileReader("productos_stock.txt"))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] partes = linea.split(";");
                if (partes.length >= 2) {
                    String marca = partes[0].trim();
                    String modelo = partes[1].trim();
                    String item = marca + " - " + modelo;
                    modeloCombo.addElement(item);
                }
            }
            cmbProducto.setModel(modeloCombo);
            cmbProducto.setSelectedIndex(0); // asegura que "Elige una opción" quede seleccionado al inicio
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar productos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }


    private void cmbProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbProductoActionPerformed
        String seleccionado = (String) cmbProducto.getSelectedItem();

        if (seleccionado.equals("Elige una opción")) {
            lblValorStock.setText("");
            return;
        }

        try (BufferedReader br = new BufferedReader(new FileReader("productos_stock.txt"))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] partes = linea.split(";");
                if (partes.length >= 4) {
                    String marcaModelo = partes[0].trim() + " - " + partes[1].trim();
                    if (marcaModelo.equals(seleccionado)) {
                        lblValorStock.setText(partes[3].trim());
                        break;
                    }
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al leer el stock: " + e.getMessage());
        }
    }//GEN-LAST:event_cmbProductoActionPerformed

    private void procesarPago() {
        // 1. Obtener el total a pagar
        double total = 0;
        DefaultTableModel modelo = (DefaultTableModel) tablaVentas.getModel();
        for (int i = 0; i < modelo.getRowCount(); i++) {
            Object valor = modelo.getValueAt(i, 5); // columna "Total"
            if (valor != null) {
                total += Double.parseDouble(valor.toString());
            }
        }

        // 2. Verificar si hay productos en la tabla
        if (modelo.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No hay productos para vender.");
            return;
        }

        // 3. Mostrar el diálogo de pago
        form_RealizarPago dialogo = new form_RealizarPago(this, true, total, modelo);
        dialogo.setLocationRelativeTo(this);
        dialogo.setVisible(true);

        // 4. Si se realizó el pago, limpiar la tabla
        if (dialogo.isPagoExitoso()) {
            modelo.setRowCount(0);
            lblValorStock.setText("");
            cmbProducto.setSelectedIndex(0);
            txtCantidad.setText("");
            cargarProductosComboBox();
            JOptionPane.showMessageDialog(this, "Venta finalizada correctamente.");
        }
    }


    private void btnPagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPagarActionPerformed
        procesarPago();
    }//GEN-LAST:event_btnPagarActionPerformed

    private void limpiarTablaVenta() {
        DefaultTableModel modelo = (DefaultTableModel) tablaVentas.getModel();
        modelo.setRowCount(0); // Borra todas las filas
    }


    private void btnLimpiarTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarTablaActionPerformed
        int confirm = JOptionPane.showConfirmDialog(this,
                "¿Estás seguro que deseas limpiar toda la tabla?",
                "Confirmar",
                JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            limpiarTablaVenta();
        }
    }//GEN-LAST:event_btnLimpiarTablaActionPerformed

    private void eliminarProductoDeTabla() {
        int filaSeleccionada = tablaVentas.getSelectedRow();

        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona una fila para eliminar.");
            return;
        }

        DefaultTableModel modelo = (DefaultTableModel) tablaVentas.getModel();
        modelo.removeRow(filaSeleccionada);

        JOptionPane.showMessageDialog(this, "Producto eliminado de la tabla.");
    }


    private void btnEliminarCantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarCantidadActionPerformed
        eliminarProductoDeTabla();
    }//GEN-LAST:event_btnEliminarCantidadActionPerformed

    private void editarCantidadProducto() {
        int fila = tablaVentas.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona una fila para editar.");
            return;
        }

        // Obtener valores actuales
        String producto = tablaVentas.getValueAt(fila, 2).toString(); // Columna Producto (Marca - Modelo)
        String cantidadStr = tablaVentas.getValueAt(fila, 4).toString(); // Columna Cantidad
        int cantidadActual = Integer.parseInt(cantidadStr);

        // Buscar stock desde el archivo productos_stock.txt
        int stockDisponible = buscarStockDisponible(producto);

        String nuevaCantidadStr = JOptionPane.showInputDialog(
                this,
                "📦 Stock disponible: " + stockDisponible + "\n"
                + "Cantidad actual: " + cantidadActual + "\n\n"
                + "Ingrese la nueva cantidad:"
        );

        if (nuevaCantidadStr == null || nuevaCantidadStr.isEmpty()) {
            return;
        }

        try {
            int nuevaCantidad = Integer.parseInt(nuevaCantidadStr);

            if (nuevaCantidad <= 0 || nuevaCantidad > stockDisponible) {
                JOptionPane.showMessageDialog(this, "La cantidad es inválida o excede el stock disponible.");
                return;
            }

            // Actualizar la cantidad y el total
            double precio = Double.parseDouble(tablaVentas.getValueAt(fila, 3).toString());
            double nuevoTotal = nuevaCantidad * precio;

            tablaVentas.setValueAt(nuevaCantidad, fila, 4); // actualizar cantidad
            tablaVentas.setValueAt(nuevoTotal, fila, 5); // actualizar total

            JOptionPane.showMessageDialog(this, "Cantidad actualizada correctamente.");

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Cantidad inválida.");
        }
    }

    private int buscarStockDisponible(String marcaModelo) {
        try (BufferedReader br = new BufferedReader(new FileReader("productos_stock.txt"))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] partes = linea.split(";");
                if (partes.length >= 4) {
                    String item = partes[0].trim() + " - " + partes[1].trim();
                    if (item.equalsIgnoreCase(marcaModelo)) {
                        return Integer.parseInt(partes[3].trim());
                    }
                }
            }
        } catch (IOException | NumberFormatException e) {
            e.printStackTrace();
        }
        return 0;
    }


    private void btnEditarCantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarCantidadActionPerformed
        editarCantidadProducto();
    }//GEN-LAST:event_btnEditarCantidadActionPerformed

    private void btnRefrescarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefrescarActionPerformed

        cargarProductosComboBox(); // recarga combo con stock nuevo

        // ✅ Forzar actualización del lblValorStock para el producto actualmente seleccionado
        cmbProductoActionPerformed(null);

        JOptionPane.showMessageDialog(this, "Stock actualizado manualmente.");
    }//GEN-LAST:event_btnRefrescarActionPerformed

    private void mostrarResumenFacturas() {
        File carpeta = new File("Facturas");
        if (!carpeta.exists()) {
            JOptionPane.showMessageDialog(this, "No hay facturas generadas aún.");
            return;
        }

        File[] archivos = carpeta.listFiles((dir, name) -> name.endsWith(".pdf"));
        int total = archivos != null ? archivos.length : 0;

        JOptionPane.showMessageDialog(this, "Facturas generadas: " + total);
    }


    private void btnResumenFacturasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResumenFacturasActionPerformed
        mostrarResumenFacturas();
    }//GEN-LAST:event_btnResumenFacturasActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(form_Empleado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(form_Empleado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(form_Empleado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(form_Empleado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new form_Empleado().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarProducto;
    private javax.swing.JToggleButton btnCerrarSesion;
    private javax.swing.JButton btnEditarCantidad;
    private javax.swing.JButton btnEliminarCantidad;
    private javax.swing.JButton btnLimpiarTabla;
    private javax.swing.JButton btnPagar;
    private javax.swing.JButton btnRefrescar;
    private javax.swing.JButton btnResumenFacturas;
    private javax.swing.JButton btnSalirCuenta;
    private javax.swing.JComboBox<String> cmbCliente;
    private javax.swing.JComboBox<String> cmbProducto;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCantidad;
    private javax.swing.JLabel lblCliente;
    private javax.swing.JLabel lblProducto;
    private javax.swing.JLabel lblValorStock;
    private javax.swing.JLabel lblValorStock1;
    private javax.swing.JLabel lbltitulo;
    private javax.swing.JTable tablaVentas;
    private javax.swing.JTextField txtCantidad;
    // End of variables declaration//GEN-END:variables
}
